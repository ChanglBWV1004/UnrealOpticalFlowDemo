diff --git a/Engine/Config/ConsoleVariables.ini b/Engine/Config/ConsoleVariables.ini
index 73129b952a9..c8eb5209a3b 100644
--- a/Engine/Config/ConsoleVariables.ini
+++ b/Engine/Config/ConsoleVariables.ini
@@ -33,14 +33,14 @@
 
 
 ; Uncomment to get detailed logs on shader compiles and the opportunity to retry on errors
-; r.ShaderDevelopmentMode=1
+r.ShaderDevelopmentMode=1
 ; Uncomment to dump shaders in the Saved folder
 ; Warning: leaving this on for a while will fill your hard drive with many small files and folders
-;r.DumpShaderDebugInfo=1
+r.DumpShaderDebugInfo=1
 ; When this is enabled, dumped shader paths will get collapsed (in the cases where paths are longer than the OS's max)
-;r.DumpShaderDebugShortNames=1
+r.DumpShaderDebugShortNames=1
 ; When this is enabled, when dumping shaders an additional file to use with ShaderCompilerWorker -direct mode will be generated
-;r.DumpShaderDebugWorkerCommandLine=1
+r.DumpShaderDebugWorkerCommandLine=1
 ; Uncomment to enable parallel rendering at startup
 ;r.RHICmdBypass=0
 
diff --git a/Engine/Source/Runtime/Renderer/Private/PostProcess/PostProcessing.cpp b/Engine/Source/Runtime/Renderer/Private/PostProcess/PostProcessing.cpp
index 4fda27ad781..0303babd775 100644
--- a/Engine/Source/Runtime/Renderer/Private/PostProcess/PostProcessing.cpp
+++ b/Engine/Source/Runtime/Renderer/Private/PostProcess/PostProcessing.cpp
@@ -1049,7 +1049,8 @@ static FRenderingCompositeOutputRef AddPostProcessMaterialChain(
 	EBlendableLocation InLocation,
 	FRenderingCompositeOutputRef SeparateTranslucency = FRenderingCompositeOutputRef(),
 	FRenderingCompositeOutputRef PreTonemapHDRColor = FRenderingCompositeOutputRef(),
-	FRenderingCompositeOutputRef PostTonemapHDRColor = FRenderingCompositeOutputRef())
+	FRenderingCompositeOutputRef PostTonemapHDRColor = FRenderingCompositeOutputRef(),
+    FRenderingCompositeOutputRef VelocityRT = FRenderingCompositeOutputRef())
 {
 	if( !Context.View.Family->EngineShowFlags.PostProcessing ||
 		!Context.View.Family->EngineShowFlags.PostProcessMaterial ||
@@ -1129,8 +1130,10 @@ static FRenderingCompositeOutputRef AddPostProcessMaterialChain(
 		{
 			Node->SetInput(ePId_Input2, PreTonemapHDRColor);
 			Node->SetInput(ePId_Input3, PostTonemapHDRColor);
-		}
-
+        } else {
+            Node->SetInput(ePId_Input2, VelocityRT);
+        }
+        
 		LastestOutput = FRenderingCompositeOutputRef(Node);
 	}
 
@@ -1455,7 +1458,7 @@ void FPostProcessing::Process(FRHICommandListImmediate& RHICmdList, const FViewI
 				VelocityInput = Context.Graph.RegisterPass(new(FMemStack::Get()) FRCPassPostProcessInput(VelocityRT));
 			}
 
-			Context.FinalOutput = AddPostProcessMaterialChain(Context, BL_BeforeTranslucency, SeparateTranslucency);
+			Context.FinalOutput = AddPostProcessMaterialChain(Context, BL_BeforeTranslucency, SeparateTranslucency,FRenderingCompositeOutputRef(),FRenderingCompositeOutputRef(),VelocityInput);
 
 			static const auto CVar = IConsoleManager::Get().FindTConsoleVariableDataInt(TEXT("r.DepthOfFieldQuality"));
 			check(CVar)
